import discord
import json
from discord.ext import commands
from cogs.utils import DictManip as dm
import xkcd as xklib

"""
This whole thing is a doozy.
The xkcd_blob.json file was generated by using a td-idf algorithm from Natural Language Toolkit (nltk).
I grabbed the 10 most important words from an xkcd's title and alt-text and transcript (if available).
The functions below try to find whole-word matches to this list in the xkcd_blob.json file.
It will return the comic with the most whole-word matches.
"""


class Comics:
  def __init__(self, bot):
    self.bot = bot

  @commands.command(name="xkcd", aliases=["xk", "x"])
  async def get_xkcd(self, ctx, *args):
    """ Search for a vaguely relevant xkcd comic (if you're lucky). Otherwise returns a random comic """
    # pre-generated blob file
    with open("data/xkcd_blob.json", "r") as f:
      jsonData = json.load(f)

    # Split query into list and remove nonalpha phrases
    wList = " ".join(args).lower().split()
    for x in wList[:]:
      if not x.isalpha():
        wList.remove(x)

    # Short circuit upon no alpha input --> rand comic
    if not wList:
      randComic = xklib.getRandomComic()
      return await ctx.send("**{}**\n{}".format(randComic.getTitle(), randComic.getImageLink()))

    matchDict = {}
    for key, value in jsonData.items():
      count = 0
      for uw in wList:
        if uw in jsonData[key]["tfidf_words"]:
          count += 1
      matchDict[jsonData[key]["num"]] = count

    n = dm.keywithmaxval(matchDict)

    # no matches found --> random comic
    if matchDict[n] == 0:
      randComic = xklib.getRandomComic()
      return await ctx.send("**{}**\n{}".format(randComic.getTitle(), randComic.getImageLink()))

    comic = xklib.getComic(n)

    await ctx.send("I found this comic with {} hits\n**{}**\n{}".format(matchDict[n], comic.getTitle(), comic.getImageLink()))


def setup(bot):
  bot.add_cog(Comics(bot))
